# Fit the model to log production
lm_fit <- function(data){
return(lm(logprod ~ tod + I(tod^2) + toy + I(toy^2), data=data))
}
fit <- lm_fit(solarAU)
# QR + solve.qr = qr.solve
qr_solve <- function(){
return(qr.solve(X, solarAU$logprod))
}
# Manual QR + solve
qr_solve_manual <- function(){
# find qr decomposition
qr_obj <- qr(X)
# Use it with solve
return(backsolve(qr.R(qr_obj), t(qr.Q(qr_obj)) %*% solarAU$logprod))
}
# Using solve.qr with a qr decomposition
solve_qr <- function(){
# find qr object
qr_obj <- qr(X)
# solve it with solve.qr()
return(solve.qr(qr_obj, solarAU$logprod))
}
# Microbenchmark them
microbenchmark(qr_solve=qr_solve(),
manual=qr_solve_manual(),
solve_qr=solve_qr(),
unit="relative")
qr_solve_result <- qr_solve()
qr_solve_manual_result <- qr_solve_manual()
solve_qr_result <- solve_qr()
one_and_two <- max(abs(qr_solve_result - qr_solve_manual_result))
one_and_three <- max(abs(qr_solve_result - solve_qr_result))
two_and_three <- max(abs(qr_solve_manual_result - solve_qr_result))
lm_and_one <- max(abs(fit$coefficients - qr_solve_result))
cat("Maximum difference between qr.solve() and manual QR solve: ", one_and_two, "\n",
"Maximum difference between qr.solve() and solve.qr(): ", one_and_three, "\n",
"Maximum difference between manual QR solve and solve.qr(): ", two_and_three, "\n",
"Maximum difference between lm() and qr.solve(): ", lm_and_one)
# Add a column to solarAU containing the fitted values
solarAU$fitPoly <- fit$fitted.values
# Plot the fitted values
pl1 <- ggplot(solarAU,
aes(x = toy, y = tod, z = fitPoly)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
# Plot the difference between fitted values and log production
pl2 <- ggplot(solarAU,
aes(x = toy, y = tod, z = logprod - fitPoly)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
cholesky_solver <- function(){
L <- chol(crossprod(X))
return(backsolve(L, forwardsolve(t(L), t(X) %*% solarAU$logprod)))
}
chol_result <- cholesky_solver()
max(abs(chol_result - qr_solve_result))
microbenchmark(
chol=cholesky_solver(),
qr=qr_solve(),
unit="relative"
)
microbenchmark(
chol=cholesky_solver(),
qr=qr_solve(),
unit="relative",
times=500
)
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
library(Cpp)
library(Rcpp)
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
export R_LIBS="~/myRlib"
Rscript myscript.r
.libPaths("~/myRlib")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
.libPaths("~/RcppArmadillo")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
library(Rcpp)
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(viridis)
library(gridExtra)
library(microbenchmark)
# Read in the data
solarAU <- read_csv(
file="solarAU.csv",
col_types = cols(
X1=col_integer(),
prod=col_double(),
toy=col_double(),
tod=col_double()
))
# Work with log production, since it's less skewed
solarAU$logprod <- log(solarAU$prod+0.01)  # +0.01 to avoid -Inf when production is 0
ggplot(solarAU,
aes(x = toy, y = tod, z = logprod)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
X <- with(solarAU, cbind(1, tod, tod^2, toy, toy^2))
colnames(X) <- c("intercept", "tod", "todsq", "toy", "toysq")
# Fit the model to log production
lm_fit <- function(data){
return(lm(logprod ~ tod + I(tod^2) + toy + I(toy^2), data=data))
}
fit <- lm_fit(solarAU)
# QR + solve.qr = qr.solve
qr_solve <- function(){
return(qr.solve(X, solarAU$logprod))
}
# Manual QR + solve
qr_solve_manual <- function(){
# find qr decomposition
qr_obj <- qr(X)
# Use it with solve
return(backsolve(qr.R(qr_obj), t(qr.Q(qr_obj)) %*% solarAU$logprod))
}
# Using solve.qr with a qr decomposition
solve_qr <- function(){
# find qr object
qr_obj <- qr(X)
# solve it with solve.qr()
return(solve.qr(qr_obj, solarAU$logprod))
}
# Microbenchmark them
microbenchmark(qr_solve=qr_solve(),
manual=qr_solve_manual(),
solve_qr=solve_qr(),
unit="relative")
qr_solve_result <- qr_solve()
qr_solve_manual_result <- qr_solve_manual()
solve_qr_result <- solve_qr()
one_and_two <- max(abs(qr_solve_result - qr_solve_manual_result))
one_and_three <- max(abs(qr_solve_result - solve_qr_result))
two_and_three <- max(abs(qr_solve_manual_result - solve_qr_result))
lm_and_one <- max(abs(fit$coefficients - qr_solve_result))
cat("Maximum difference between qr.solve() and manual QR solve: ", one_and_two, "\n",
"Maximum difference between qr.solve() and solve.qr(): ", one_and_three, "\n",
"Maximum difference between manual QR solve and solve.qr(): ", two_and_three, "\n",
"Maximum difference between lm() and qr.solve(): ", lm_and_one)
# Add a column to solarAU containing the fitted values
solarAU$fitPoly <- fit$fitted.values
# Plot the fitted values
pl1 <- ggplot(solarAU,
aes(x = toy, y = tod, z = fitPoly)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
# Plot the difference between fitted values and log production
pl2 <- ggplot(solarAU,
aes(x = toy, y = tod, z = logprod - fitPoly)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
cholesky_solver <- function(){
L <- chol(crossprod(X))
return(backsolve(L, forwardsolve(t(L), t(X) %*% solarAU$logprod)))
}
chol_result <- cholesky_solver()
max(abs(chol_result - qr_solve_result))
microbenchmark(
chol=cholesky_solver(),
qr=qr_solve(),
unit="relative",
times=500
)
choleskySolverArmadillo(X, solarAU$logprod)
dim(X)
solarAU$logprod
y <- solarAU$logprod
length(y)
dim(y) <- c(length(y), 1)
y
y
choleskySolverArmadillo(X, solarAU$logprod)
choleskySolverArmadillo(X, y)
dim(X)
dim(y)
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
choleskySolverArmadillo(X, y)
qr_solve_result
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
qrSolverArmadillo(X, y)
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
qrSolverArmadillo(X, y)
microbenchmark(
RChol=cholesky_solver(),
RcppChol=choleskySolverArmadillo(X, y),
)
microbenchmark(
RChol=cholesky_solver(),
RcppChol=choleskySolverArmadillo(X, y),
unit="relative"
)
microbenchmark(
RChol=cholesky_solver(),
RcppChol=choleskySolverArmadillo(X, y),
R_QR=qr_solve(),
RcppQR=qrSolverArmadillo(X, y),
unit="relative"
)
?microbenchmark
library(mvtnorm)
lmLocal <- function(y, x0, X0, x, X, H){
w <- dmvnorm(x, x0, H)
fit <- lm(y ~ -1 + X, weights = w)
return( t(X0) %*% coef(fit) )
}
n <- nrow(X)
nsub <- 2e3
sub <- sample(1:n, nsub, replace = FALSE)
y <- solarAU$logprod
solarAU_sub <- solarAU[sub, ]
x <- as.matrix(solarAU[c("tod", "toy")])
x0 <- x[sub, ]
X0 <- X[sub, ]
predLocal <- sapply(1:nsub, function(ii){
lmLocal(y = y, x0 = x0[ii, ], X0 = X0[ii, ], x = x, X = X, H = diag(c(1, 0.1)^2))
})
solarAU_sub$fitLocal <- predLocal
pl1 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
pl2 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = logprod - fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
solarAU_sub$fitLocal <- predLocal
pl1 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
pl2 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = logprod - fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
predLocal <- sapply(1:nsub, function(ii){
lmLocal(y = y, x0 = x0[ii, ], X0 = X0[ii, ], x = x, X = X, H = diag(c(1, 0.1)^2))
})
solarAU_sub$fitLocal <- predLocal
pl1 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
pl2 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = logprod - fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
solarAU_sub$fitLocal
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
dim(X)
chol(diag(5))
dmvnInt(X, c(1,1,1,1,1), chol(diag(5)))
sourceCpp("LocalPolynomialRegression/cppattempt.cpp")
cppFunction("arma::vec dmvnInt(arma::mat & X, const arma::rowvec & mu, arma::mat & L)
{
unsigned int d = X.n_cols;
unsigned int m = X.n_rows;
arma::vec D = L.diag();
arma::vec out(m);
arma::vec z(d);
double acc;
unsigned int icol, irow, ii;
for(icol = 0; icol < m; icol++)
{
for(irow = 0; irow < d; irow++)
{
acc = 0.0;
for(ii = 0; ii < irow; ii++) acc += z.at(ii) * L.at(irow, ii);
z.at(irow) = ( X.at(icol, irow) - mu.at(irow) - acc ) / D.at(irow);
}
out.at(icol) = sum(square(z));
}
out = exp( - 0.5 * out - ( (d / 2.0) * log(2.0 * M_PI) + sum(log(D)) ) );
return out;
}")
sourceCpp("
#include <RcppArmadillo.h>")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(viridis)
library(Rcpp)
library(gridExtra)
library(microbenchmark)
# Read in the data
solarAU <- read_csv(
file="solarAU.csv",
col_types = cols(
X1=col_integer(),
prod=col_double(),
toy=col_double(),
tod=col_double()
))
# Work with log production, since it's less skewed
solarAU$logprod <- log(solarAU$prod+0.01)  # +0.01 to avoid -Inf when production is 0
ggplot(solarAU,
aes(x = toy, y = tod, z = logprod)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
X <- with(solarAU, cbind(1, tod, tod^2, toy, toy^2))
y <- solarAU$logprod
colnames(X) <- c("intercept", "tod", "todsq", "toy", "toysq")
# Fit the model to log production
lm_fit <- function(data){
return(lm(logprod ~ tod + I(tod^2) + toy + I(toy^2), data=data))
}
fit <- lm_fit(solarAU)
# QR + solve.qr = qr.solve
qr_solve <- function(){
return(qr.solve(X, solarAU$logprod))
}
# Manual QR + solve
qr_solve_manual <- function(){
# find qr decomposition
qr_obj <- qr(X)
# Use it with solve
return(backsolve(qr.R(qr_obj), t(qr.Q(qr_obj)) %*% solarAU$logprod))
}
# Using solve.qr with a qr decomposition
solve_qr <- function(){
# find qr object
qr_obj <- qr(X)
# solve it with solve.qr()
return(solve.qr(qr_obj, solarAU$logprod))
}
# Microbenchmark them
microbenchmark(qr_solve=qr_solve(),
manual=qr_solve_manual(),
solve_qr=solve_qr(),
unit="relative")
qr_solve_result <- qr_solve()
qr_solve_manual_result <- qr_solve_manual()
solve_qr_result <- solve_qr()
one_and_two <- max(abs(qr_solve_result - qr_solve_manual_result))
one_and_three <- max(abs(qr_solve_result - solve_qr_result))
two_and_three <- max(abs(qr_solve_manual_result - solve_qr_result))
lm_and_one <- max(abs(fit$coefficients - qr_solve_result))
cat("Maximum difference between qr.solve() and manual QR solve: ", one_and_two, "\n",
"Maximum difference between qr.solve() and solve.qr(): ", one_and_three, "\n",
"Maximum difference between manual QR solve and solve.qr(): ", two_and_three, "\n",
"Maximum difference between lm() and qr.solve(): ", lm_and_one)
cholesky_solver <- function(){
L <- chol(crossprod(X))
return(backsolve(L, forwardsolve(t(L), t(X) %*% solarAU$logprod)))
}
chol_result <- cholesky_solver()
max(abs(chol_result - qr_solve_result))
microbenchmark(
chol=cholesky_solver(),
qr=qr_solve(),
unit="relative",
times=500
)
sourceCpp("cppattempt.cpp")
microbenchmark(
RChol=cholesky_solver(),
RcppChol=choleskySolverArmadillo(X, y),
R_QR=qr_solve(),
RcppQR=qrSolverArmadillo(X, y),
unit="relative"
)
library(mvtnorm)
lmLocal <- function(y, x0, X0, x, X, H){
w <- dmvnorm(x, x0, H)
fit <- lm(y ~ -1 + X, weights = w)
return( t(X0) %*% coef(fit) )
}
n <- nrow(X)
nsub <- 2e3
sub <- sample(1:n, nsub, replace = FALSE)
y <- solarAU$logprod
solarAU_sub <- solarAU[sub, ]
x <- as.matrix(solarAU[c("tod", "toy")])
x0 <- x[sub, ]
X0 <- X[sub, ]
predLocal <- sapply(1:nsub, function(ii){
lmLocal(y = y, x0 = x0[ii, ], X0 = X0[ii, ], x = x, X = X, H = diag(c(1, 0.1)^2))
})
solarAU_sub$fitLocal <- predLocal
pl1 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
pl2 <- ggplot(solarAU_sub,
aes(x = toy, y = tod, z = logprod - fitLocal)) +
stat_summary_hex() +
scale_fill_gradientn(colours = viridis(50))
grid.arrange(pl1, pl2, ncol = 2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
head(predLocal)
predLocal[1:10, ]
predLocal[1:10]
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
matrix(predLocal[1:2])
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
sourceCpp("cppattempt.cpp")
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
sourceCpp("cppattempt.cpp")
sourceCpp("cppattempt.cpp")
H <- diag(c(1, 0.1)^2)
a <- noloop(y, x0, X0, x, X, H)
a
sourceCpp("cppattempt.cpp")
sourceCpp("cppattempt.cpp")
sourceCpp("cppattempt.cpp")
b <- newnoloop(y, x0, X0, x, X, H)
b
b <- newnoloop(y, x0, X0, x, X, H)
head(b)
sourceCpp("cppattempt.cpp")
b <- newnoloop(y, x0, X0, x, X, H)
sourceCpp("cppattempt.cpp")
b <- newnoloop(y, x0, X0, x, X, H)
sourceCpp("cppattempt.cpp")
b <- newnoloop(y, x0, X0, x, X, H)
b
b <- newnoloop(y, x0, X0, x, X, H)
dim(b)
b * X
dim(X)
c(b)
c(b) * X
dim(c(b) * X)
sourceCpp("cppattempt.cpp")
b <- newnoloop(y, x0, X0, x, X, H)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(viridis)
library(Rcpp)
library(RcppArmadillo)
library(gridExtra)
library(microbenchmark)
library(mvtnorm)
set.seed(123)
solarAU <- read_csv(
file="solarAU.csv",
col_types = cols(
X1=col_integer(),
prod=col_double(),
toy=col_double(),
tod=col_double()
))
# Work with log production, since it's less skewed
solarAU$logprod <- log(solarAU$prod+0.01)  # +0.01 to avoid -Inf when production is 0
X <- with(solarAU, cbind(1, tod, tod^2, toy, toy^2))
y <- solarAU$logprod
colnames(X) <- c("intercept", "tod", "todsq", "toy", "toysq")
lmLocal <- function(y, x0, X0, x, X, H){
w <- dmvnorm(x, x0, H)
fit <- lm(y ~ -1 + X, weights = w)
return( t(X0) %*% coef(fit) )
}
set.seed(123)
n <- nrow(X)
nsub <- 2e3
sub <- sample(1:n, nsub, replace = FALSE)
y <- solarAU$logprod
solarAU_sub <- solarAU[sub, ]
x <- as.matrix(solarAU[c("tod", "toy")])
x0 <- x[sub, ]
X0 <- X[sub, ]
predLocal <- sapply(1:nsub, function(ii){
lmLocal(y = y, x0 = x0[ii, ], X0 = X0[ii, ], x = x, X = X, H = diag(c(1, 0.1)^2))
})
sourceCpp("newcpp.cpp")
H <- diag(c(1, 0.1)^2)
matrix(predLocal[1:10])
system.time(local4(y, x0, X0, x, X, H))
system.time(sapply(1:nsub, function(ii){
lmLocal(y = y, x0 = x0[ii, ], X0 = X0[ii, ], x = x, X = X, H = diag(c(1, 0.1)^2))
}))
sourceCpp("newcpp.cpp")
system.time(local_Rcpp(y, x0, X0, x, X, H))
